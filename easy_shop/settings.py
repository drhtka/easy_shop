# -*- coding: utf-8 -*-
"""
Django settings for easy_shop project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2vc0y4zj$*s^08amxurworc-vdvubnia$^@#2uig57t-xc80k_'
# SECRET_KEY = '2vc0y4zj$*s^08amxurworc-vdvubnia$^@#2uig57t-xc60k_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'accounts.apps.AccountsConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'cart.apps.CartConfig',
    'listings.apps.ListingsConfig',
    'orders.apps.OrdersConfig',
    'django_cleanup.apps.CleanupConfig',
    'oauth2_provider', # OAuth2
    'rest_framework',
    'authcriipto.apps.AuthcriiptoConfig',
    'mozilla_django_oidc',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    #'django.contrib.sessions.middleware.SessionMiddleware', # This needs to be first
    # 'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "core.middleware.OIDCSessionRefreshMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    MIDDLEWARE += (
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    )
    INSTALLED_APPS += (
        'debug_toolbar',
    )
    INTERNAL_IPS = ('127.0.0.1',)
    DEBUG_TOOLBAR_CONFIG = {
        'INTERCEPT_REDIRECTS': False,
    }


ROOT_URLCONF = 'easy_shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'easy_shop.context_processors.cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'easy_shop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'easy_shop',
#         'USER': 'easy_shop',
#         'PASSWORD': '4xLVRanse6ure8L',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",

)

# для отправки в терминал
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


CART_ID = 'cart'

# LOGIN_URL = 'login'
# LOGOUT_REDIRECT_URL = 'listings:product_list'
# LOGOUT_REDIRECT_URL = 'listings:product_list'

try:
    from .local_settings import *
except ImportError:
    pass

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
#         'rest_framework.authentication.SessionAuthentication', # To keep the Browsable API
#         #'rest_framework.authentication.TokenAuthentication',
#     ),
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),
# }


AUTHENTICATION_BACKENDS = (
    "core.backends.CustomOIDCAuthenticationBackend",
    # "mozilla_django_oidc.auth.OIDCAuthenticationBackend",
    "django.contrib.auth.backends.ModelBackend",
)

# AUTHENTICATION_BACKENDS = (
#     'django.contrib.auth.backends.ModelBackend', # To keep the Browsable API
#     'oauth2_provider.backends.OAuth2Backend',
# )


# Logging

import logging


#to  file
logging.getLogger('asyncio').setLevel(logging.WARNING)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] {levelname}: {name}.{message}",
            "style": "{",
        },
    },
    'handlers': {
        "file": {'level': 'DEBUG',
                 "class": "logging.FileHandler",
                 "filename": "debug.log"
                 },
    },
    "root": {
        "handlers": ["file"],
        # "handlers": ["console"],
        "level": "DEBUG",
        'propagate': True
    },

    'mozilla_django_oidc': {
        'handlers': ["file"],
        "level": "DEBUG",
        'propagate': True
    },

    'core': {
        'handlers': ["file"],
        "level": "DEBUG",
        'propagate': True
    },

}
#
# LOGGING = {
#     ...
# 'loggers': {
#     'mozilla_django_oidc': {
#         'handlers': ['console'],
#         'level': 'DEBUG'
#     },
#     ...
# }

# https://stackoverflow.com/questions/38529424/django-forbidden-csrf-cookie-not-set
CSRF_TRUSTED_ORIGINS = ['http://finesauces.pp.ua']

CSRF_COOKIE_SECURE = False

# OIDC_CREATE_USER = False

# LOGIN_REDIRECT_URL_FAILURE = "order_create"
LOGIN_REDIRECT_URL = "orders:order_create"
# LOGIN_REDIRECT_URL = "authcriipto:indexx"
LOGOUT_REDIRECT_URL = "orders:order_create"
# LOGOUT_REDIRECT_URL = "listings:lproduct_list"


OKTA_DOMAIN = os.environ.get("OKTA_DOMAIN", "")  # [Your Okta domain]

OIDC_RP_CLIENT_ID = os.environ.get(
    "OIDC_RP_CLIENT_ID", "urn:finesauces:identifier:8933"
)  # [Your Okta application’s client ID]
OIDC_RP_CLIENT_SECRET = os.environ.get(
    "OIDC_RP_CLIENT_SECRET", "HX6kKBTkvUN41U0KbZ/LrFw2qc5qMm9WVQMfvg3/oas="
)  # [Your Okta application’s client secret]

OIDC_RP_SIGN_ALGO = "RS256"
OIDC_OP_AUTHORIZATION_ENDPOINT = f"https://inesauces-test.criipto.id/oauth2/authorize?response_type=code&redirect_uri=http://finesauces.pp.ua/authorization-code/callback/&" \
                                 f"acr_values=urn:grn:authn:no:bankid urn:grn:authn:no:bankid:substantial urn:grn:authn:dk:mitid:low&" \
    # f"scope=openid&"
# f"state=etats&"  # The OIDC authorization endpoint
OIDC_RP_TOKEN_ENDPOINT = (
    f"https://inesauces-test.criipto.id/oauth2/token"  # The OIDC token endpoint
)
OIDC_OP_USER_ENDPOINT: str = (
    f"https://inesauces-test.criipto.id/oauth2/userinfo"  # The OIDC userinfo endpoint
)
OIDC_OP_TOKEN_ENDPOINT = (
    f"https://inesauces-test.criipto.id/oauth2/token"  # The OIDC token endpoint
)
OIDC_OP_JWKS_ENDPOINT = (
    f"https://inesauces-test.criipto.id/.well-known/jwks"  # The OIDC JWKS endpoint
)

OIDC_OP_TOKEN_REVOKE_ENDPOINT = f"https://inesauces-test.criipto.id/oauth2/revoke"  # The OIDC token revocation endpoint

# OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 60 * 0.6  # 1 hour
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 60 * 60  # 1 hour

OIDC_STORE_ACCESS_TOKEN = os.environ.get(
    "OIDC_STORE_ACCESS_TOKEN", True
)  # Store the access token in the OIDC backend
OIDC_STORE_ID_TOKEN = os.environ.get(
    "OIDC_STORE_ID_TOKEN", True
)  # Store the ID token in the OIDC backend
OIDC_STORE_REFRESH_TOKEN = os.environ.get(
    "OIDC_STORE_REFRESH_TOKEN", True
)  # Store the refresh token in the OIDC backend

OIDC_RP_SCOPES = os.environ.get(
    "OIDC_RP_SCOPES", "openid" #profile email offline_access
)  # The OIDC scopes to request

OIDC_EXEMPT_URLS = [
    "oidc_authentication_init",
    "oidc_authentication_callback",
    "logout",
]
